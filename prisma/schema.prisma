// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
  CUSTOMER
}

enum Status {
  PENDING
  SHIPPED
  DELIVERED
}

model User {
  id              String            @id @default(uuid())
  name            String
  email           String            @unique
  password        String
  role            String
  contactNo       String
  address         String
  profileImg      String
  createdAt       DateTime?         @default(now())
  updatedAt       DateTime?         @updatedAt()
  reviewAndRating ReviewAndRating[]
  order           Order[]

  @@map("user")
}

model Category {
  id        String    @id @default(uuid())
  title     String
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  book      Book[]

  @@map("category")
}

model Book {
  id              String            @id @default(uuid())
  title           String
  author          String
  price           Float
  genre           String
  publicationDate DateTime
  categoryId      String
  category        Category          @relation(fields: [categoryId], references: [id])
  createdAt       DateTime?         @default(now())
  updatedAt       DateTime?         @updatedAt
  reviewAndRating ReviewAndRating[]
  orderedBook     OrderedBook[]

  @@map("book")
}

model ReviewAndRating {
  id        String    @id @default(uuid())
  review    String
  rating    Int
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  bookId    String
  book      Book      @relation(fields: [bookId], references: [id])
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  @@map("reviewAndRating")
}

model Order {
  id          String        @id @default(uuid())
  userId      String
  user        User          @relation(fields: [userId], references: [id])
  status      Status        @default(PENDING)
  createdAt   DateTime?     @default(now())
  updatedAt   DateTime?     @updatedAt
  orderedBook OrderedBook[]

  @@map("order")
}

model OrderedBook {
  id        String    @id @default(uuid())
  orderId   String
  order     Order     @relation(fields: [orderId], references: [id])
  bookId    String
  book      Book      @relation(fields: [bookId], references: [id])
  quantity  Int
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  @@map("orderedBook")
}
